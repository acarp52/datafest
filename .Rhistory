sqlConnString <- "Driver=SQL Server; Server=win.nathancastlecloud.net; Database=expedia; Uid=acarp; Pwd=M3r3dith*$tacyy"
sqlWait <- TRUE
sqlConsoleOutput <- FALSE
sqlCompute <- RxInSqlServer(
connectionString = sqlConnString,
wait = sqlWait,
consoleOutput = sqlConsoleOutput)
rxSetComputeContext( sqlComputeTrace)
rxSetComputeContext(sqlComputeTrace)
rxSetComputeContext(sqlCompute)
q()
source("connect.r")
getwd()
setwd("C:\Users\acarp\Documents\GitHub\datafest")
help.search("directory")
setwd("C:\\Users\\acarp\\Documents\\GitHub\\datafest")
getwd()
source("connect.r")
help("rxSummary")
sqlexpediaTable <- "dbo.data"
sqlRowsPerRead = 5000
sqlTable <- "dbo.data"
sqlexpediaDS <- RxSqlServerData(connectionString = sqlConnString,
table = sqlTable,
rowsPerRead = sqlRowsPerRead)
sqluidTable <- "user_id"
sqluserDS \<- RxSqlServerData(connectionString = sqlConnString,
table = sqluidTable, rowsPerRead = sqlRowsPerRead)
sqluserDS \<- RxSqlServerData(connectionString = sqlConnString, table = sqluidTable, rowsPerRead = sqlRowsPerRead)
RxSqlServerData(connectionString = sqlConnString, table = sqluidTable, rowsPerRead = sqlRowsPerRead)
sqluserDS <- RxSqlServerData(connectionString = sqlConnString, table = sqluidTable, rowsPerRead = sqlRowsPerRead)
source("connect.r")
rxSetComputeContext(sqlCompute)
sum_uid <- rxSummary(formula = ~user_id, data = sqlexpediaDS)
library(sqldf)
sDF <- read.csv(file="dest.txt", header=TRUE, sep="\t")
RowsInCSV = 10000000 #Or however many rows there are
List <- lapply(1:20000, function(x) read.csv(file="data.txt", nrows=1, skip = sample(1, RowsInCSV), header=TRUE, sep="\t")
DF = do.call(rbind, List)
RowsInCSV = 10000000 #Or however many rows there are
List <- lapply(1:20000, function(x) read.csv(file="data.txt", nrows=1, skip = sample(1, RowsInCSV), header=TRUE, sep="\t")
DF = do.call(rbind, List)
RowsInCSV = 10000000 #Or however many rows there are
List <- lapply(1:20000, function(x) read.csv(file="data.txt", nrows=1, skip = sample(1, RowsInCSV), header=TRUE, sep="\t")
List <- lapply(1:20000, function(x) read.csv(file="data.txt", nrows=1, skip = sample(1, RowsInCSV), header=TRUE, sep="\t"))
List <- lapply(1:20000, function(x) read.csv(file="data.txt", nrows=1, skip = sample(1, RowsInCSV), header=F, sep="\t"))
sampDF <- read.csv(file="sample.txt", header=TRUE, sep="\t")
sampDF <- read.csv(file="subset.txt", header=TRUE, sep="\t")
head(sampDF)
summary(sampDF)
summary(sampDF)
sampDF$user_location_latitude
library(rworldmap)
library(rworldmap)
> newmap <- getMap(resolution = "low")plot(newmap)
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap)
library(rworldmap)
Install package Map()
install.packages("ggplot2")
install.packages(rworldmap)
install.packages(map)
install.packages(maptools)
install.packages(mapa)
install.packages(maps)
install.packages(c("ggplot2", "maps", "ggmap"))
library(rworldmap)
install.packages("rworldmap")
library(rworldmap)
newmap <- getMap(resolution = "medium")
newmap <- getMap(resolution = "high")
plot(newmap)
points(sampDF$user_location_longitude, sampDF$user_location_latitude, col = "red", cex = .6)
plot(newmap)
points(sampDF$user_location_longitude, sampDF$user_location_latitude, col = "red", cex = .8)
points(sampDF$user_location_latitude, sampDF$user_location_longitude, col = "red", cex = .8)
plot(newmap)
points(sampDF$user_location_latitude, sampDF$user_location_longitude, col = "red", cex = .8)
points(sampDF$user_location_longitude, sampDF$user_location_latitude, col = "red", cex = .8)
plot(newmap, xlim=c(-80, -50), asp=1)
plot(newmap, xlim = c(-20, 59), ylim = c(35, 71), asp = 1)
points(sampDF$user_location_longitude, sampDF$user_location_latitude, col = "red", cex = .8)
plot(newmap)
points(40.75512, -73.983009, col = "red", cex = .8)
points(-73.983009, 40.75512, col = "red", cex = .8)
points(sampDF$user_location_longitude, sampDF$user_location_latitude, col = "red", cex = .8)
plot(newmap)
points(sampDF$user_location_longitude, sampDF$user_location_latitude, col = "red", cex = .8)
points(sampDF$user_location_longitude, sampDF$user_location_latitude, col = "red", cex = .3)
plot(newmap, xlim = c(-80, -70), ylim = c(30, 50), asp = 1)
points(sampDF$user_location_longitude, sampDF$user_location_latitude, col = "red", cex = .3)
points(-73.983009, 40.75512, col = "red", cex = .8)
plot(newmap, xlim = c(-75, -70), ylim = c(35, 45), asp = 1)
points(-73.983009, 40.75512, col = "red", cex = .8)
library(ggmap)
map <- get_map(location = 'Europe', zoom = 4)
mapPoints <- ggmap(map)
source("airports.r")
airports <- read.csv("http://openflights.svn.sourceforge.net/viewvc/openflights/openflights/data/airports.dat", header = FALSE)
head(airports)
colnames(airports) <- c("ID", "name", "city", "country", "IATA_FAA", "ICAO", "lat", "lon", "altitude", "timezone", "DST")
geocode("Rochester Institute of Technolgy")
loc <- geocode("Rochester Institute of Technolgy")
myMap <- get_map(location=loc, source=“osm", color=“bw”))
loc <- "Rochester Institute of Technolgy"
myMap <- get_map(location=loc, source=“osm", color=“bw”))
myMap <- get_map(location=loc,source=“osm",color=“bw”))
myMap <-
get_map(location=loc,
source=“osm",color=“bw”))
myMap <- get_map(location=loc,source="osm",color="bw"))
myMap <- get_map(location=loc,source="osm",color="bw")
myMap <- get_map(location=loc,source="google",color="bw")
ggmap(myMap)
myMap <- get_map(location=loc,source="google")
ggmap(myMap)
myMap <- get_map(location=loc,source="stamen")
ggmap(myMap)
myMap <- get_map(source="google", maptype="terrain")
ggmap(myMap)
myMap <- get_map(source="google", maptype="terrain")
myMap <- get_map(location=loc,source="google",maptype="terrain")
ggmap(myMap)
myMap <- get_map(location=loc,source="google: terrain")
myMap <- get_map(location=loc,source="stamen", maptype="terrain")
myMap <- get_stamenmap(location=loc,source="stamen", maptype="terrain")
pres <- "the white house"
qmap(pres)
qmap(pres, zoom=14)
sqlConnString <- "Driver=SQL Server; Server=win.nathancastlecloud.net; Database=expedia; Uid=acarp; Pwd=M3r3dith*$tacyy"
sqlTable <- "dbo.data"
sqlRowsPerRead = 5000
sqlexpediaDS <- RxSqlServerData(connectionString = sqlConnString,
table = sqlTable,
rowsPerRead = sqlRowsPerRead)
sqluidTable <- "user_id"
sqlWait <- TRUE
sqlConsoleOutput <- FALSE
sqlCompute <- RxInSqlServer(
connectionString = sqlConnString,
wait = sqlWait,
consoleOutput = sqlConsoleOutput)
rxSetComputeContext(sqlCompute)
sum_uid <- rxSummary(formula = ~user_id, data = sqlexpediaDS)
rxsummary(sqlexpediaDS)
qmap(pres, zoom = 14, source = "stamen",
maptype = "watercolor")
qmap("Boulder, CO", zoom = 14, source = "stamen",
maptype = "watercolor")
qmap(pres, zoom = 14, source = "stamen",
maptype = "watercolor")
qmap("Manhattan", zoom = 14, source = "stamen",
maptype = "watercolor")
qmap("Seattle, WA", zoom = 14, source = "stamen",
maptype = "watercolor")
qmap("Boulder, CO", source = "stamen",
maptype = "watercolor")
qmap("Boulder, CO", zoom = 10, source = "stamen",
maptype = "watercolor")
qmap("Boulder, CO", zoom = 12, source = "stamen",
maptype = "watercolor")
qmap(loc, zoom=12, source="google", maptype="terrain")
qmap(loc, zoom=12, source="stamen", maptype="terrain")
qmap("Rochester Institute of Technology", zoom = 12, source = "stamen",
maptype = "watercolor")
qmap("Rochester Institute of Technology", zoom = 12, source = "stamen",
maptype = "terrain")
library(maptools)
library(geosphere)
data(wrld_simpl)
US_lat = wrld_simpl$LAT[wrld_simpl$NAME == 'United States']
US_lon = wrld_simpl$LON[wrld_simpl$NAME == 'United States']
SWE_lat = wrld_simpl$LAT[wrld_simpl$NAME == 'Sweden']
SWE_lon = wrld_simpl$LON[wrld_simpl$NAME == 'Sweden']
points = gcIntermediate(c(US_lon, US_lat), c(SWE_lon, SWE_lat), 100)
dev.new(width=6, height=4)
plot(wrld_simpl)
lines(points, col='red')
install.packages("corrplot")
library(corrplot)
M <- cor(sampDF)
library(maptools)
library(geosphere)
data(wrld_simpl)
US_lat = 40.839569
US_lon = -73.881505
SWE_lat = 33.254235
SWE_lon = 126.488397
points = gcIntermediate(c(US_lon, US_lat), c(SWE_lon, SWE_lat), 100)
dev.new(width=6, height=4)
plot(wrld_simpl)
lines(points, col='red')
library(maptools)
library(geosphere)
data(wrld_simpl)
US_lat = 40.839569
US_lon = -73.881505
SWE_lat = 33.254235
SWE_lon = 126.488397
points = gcIntermediate(c(SWE_lon, SWE_lat), c(US_lon, US_lat), 100)
dev.new(width=6, height=4)
plot(wrld_simpl)
lines(points, col='red')
> qmap(pres, zoom = 14, source = "stamen",
+      maptype = "watercolor")
> qmap(pres, zoom = 14, source = "stamen",
+      maptype = "watercolor")
> qmap(pres, zoom = 14, source = "stamen",
maptype = "watercolor")
> qmap(pres, zoom = 14, source = "stamen", maptype = "watercolor")
qmap(pres, zoom = 14, source = "stamen", maptype = "watercolor")
library(maptools)
library(geosphere)
data(wrld_simpl)
US_lat = 40.839569
US_lon = -73.881505
SWE_lat = 33.254235
SWE_lon = 126.488397
points = gcIntermediate(c(SWE_lon, SWE_lat), c(US_lon, US_lat), 100)
dev.new(width=6, height=4)
plot(wrld_simpl)
lines(points, col='red')
tail(names(sort(table(sampDF$hist_price_band))), 1)
sampDF$hist_price.f <- as.numeric(factor(sampDF$hist_price , levels=c("L", "M", "H", "VH")))
sampDF
sampDF$distance.f <- as.numeric(factor(sampDF$distance_band , levels=c("VC", "L", "M", "H", "VH")))
sampDF$popularity.f <- as.numeric(factor(sampDF$popularity_band , levels=c("VL", "L", "M", "H", "VH")))
sampDF
sampDF$distance.f <- as.numeric(factor(sampDF$distance_band , levels=c("VC", "C", "M", "F", "VF")))
sampDF
sampDF$hist_price.f <- as.numeric(factor(sampDF$hist_price_band , levels=c("VL", "L", "M", "H", "VH")))
sampDF
view(sampDF)
View(sampDF)
install.packages("googleVis")
df=data.frame(country=c("US", "GB", "BR"),
val1=c(10,13,14),
val2=c(23,12,32))
Line <- gvisLineChart(df)
plot(Line)
library(googleVis)
df=data.frame(country=c("US", "GB", "BR"),
val1=c(10,13,14),
val2=c(23,12,32))
Line <- gvisLineChart(df)
plot(Line)
bub$hist_price <- sampDF$hist_price.f
bub = data.frame()
bub$hist_price <- sampDF$hist_price.f
bub = data.frame(sampDF$hist_price.f)
bub = data.frame(sampDF$hist_price.f, sampDF$popularity.f, sampDF$is_booking)
bubChart <- gvisBubbleChart(bub, xvar="hist_price.f", yvar="popularity.f", sizevar="is_booking")
install.packages("reshape")
library(reshape)
cast(bub, sampDF.hist_price.f ~ sampDF.is_booking)
bub
datSK <- data.frame(From=c(rep("A",3), rep("B", 3)),
To=c(rep(c("X", "Y", "Z"),2)),
Weight=c(5,7,6,2,9,4))
datSK
attach(sampDF)
aggdata <-aggregate(is_booking, by=list(hist_price_band.f),
FUN=sum, na.rm=TRUE)
print(aggdata)
detach(sampDF)
attach(subset)
aggdata <-aggregate(is_booking, by=list(hist_price_band),
FUN=sum, na.rm=TRUE)
print(aggdata)
detach(subset)
attach(sampDF)
aggdata <-aggregate(is_booking, by=list(hist_price_band),
FUN=sum, na.rm=TRUE)
print(aggdata)
detach(sampDF)
Sankey <- gvisSankey(aggdata, from="Group.1", to=1, weight="x",
options=list(
sankey="{link: {color: { fill: '#d799ae' } },
node: { color: { fill: '#a61d4c' },
label: { color: '#871b47' } }}"))
plot(Sankey)
aggdata$book <- rep(1,nrow(aggdata))
Sankey <- gvisSankey(aggdata, from="Group.1", to="book", weight="x",
options=list(
sankey="{link: {color: { fill: '#d799ae' } },
node: { color: { fill: '#a61d4c' },
label: { color: '#871b47' } }}"))
plot(Sankey)
aggdata$Group.1 <- as.character (aggdata$Group.1)
Sankey <- gvisSankey(aggdata, from="Group.1", to="book", weight="x",
options=list(
sankey="{link: {color: { fill: '#d799ae' } },
node: { color: { fill: '#a61d4c' },
label: { color: '#871b47' } }}"))
plot(Sankey)
aggdata$Group.1 <- as.string (aggdata$Group.1)
plot(Sankey)
attach(sampDF)
aggdata <-aggregate(is_booking, by=list(hist_price_band.f),
FUN=sum, na.rm=TRUE)
print(aggdata)
detach(sampDF)
attach(sampDF)
aggdata <-aggregate(is_booking, by=list(hist_price.f),
FUN=sum, na.rm=TRUE)
print(aggdata)
detach(sampDF)
aggdata$Group.1 <- as.string (aggdata$Group.1)
aggdata$book <- rep(1,nrow(aggdata))
aggdata$Group.1 <- as.string (aggdata$Group.1)
aggdata$Group.1 <- as.character (aggdata$Group.1)
aggdata
Sankey <- gvisSankey(aggdata, from="Group.1", to="book", weight="x",
options=list(
sankey="{link: {color: { fill: '#d799ae' } },
node: { color: { fill: '#a61d4c' },
label: { color: '#871b47' } }}"))
plot(Sankey)
datSK
aggdata
aggdata$Group.1 <- as.character (aggdata$Group.1)
View(df)
plot(Sankey)
plot(gvisSankey(subset(a2, value > 0), from="source", to="target", weight="value0", options=list(height=500, sankey="{link:{color:{fill:'lightblue'}}}")))
plot(Sankeyy)
set.seed(1000)
df <- data.frame(col1= sample(c(1:15), 15, replace = F),
col2=sample(c("aa", "bb","cc"), 15, replace=TRUE),
col3=sample(c('a','b','c','d'), 15, replace=TRUE, prob=c(0.25, 0.25, 0.20, 0.30)))
grp<-df %>%
group_by(col2, col3) %>%
summarise(n=n())
Sankeyy <- gvisSankey(grp, from="col2", to="col3", weight="n",
options=list(
sankey="{link: {color: { fill: '#d799ae' } },
node: { color: { fill: '#a61d4c' },
label: { color: '#871b47' } }}"))
plot(Sankeyy)
install.packages("magrittr")
install.packages("magrittr")
library(magrittr)
set.seed(1000)
df <- data.frame(col1= sample(c(1:15), 15, replace = F),
col2=sample(c("aa", "bb","cc"), 15, replace=TRUE),
col3=sample(c('a','b','c','d'), 15, replace=TRUE, prob=c(0.25, 0.25, 0.20, 0.30)))
grp<-df %>%
group_by(col2, col3) %>%
summarise(n=n())
Sankeyy <- gvisSankey(grp, from="col2", to="col3", weight="n",
options=list(
sankey="{link: {color: { fill: '#d799ae' } },
node: { color: { fill: '#a61d4c' },
label: { color: '#871b47' } }}"))
plot(Sankeyy)
install.packages("dplyr")
library(dplyr)
set.seed(1000)
df <- data.frame(col1= sample(c(1:15), 15, replace = F),
col2=sample(c("aa", "bb","cc"), 15, replace=TRUE),
col3=sample(c('a','b','c','d'), 15, replace=TRUE, prob=c(0.25, 0.25, 0.20, 0.30)))
grp<-df %>%
group_by(col2, col3) %>%
summarise(n=n())
Sankeyy <- gvisSankey(grp, from="col2", to="col3", weight="n",
options=list(
sankey="{link: {color: { fill: '#d799ae' } },
node: { color: { fill: '#a61d4c' },
label: { color: '#871b47' } }}"))
plot(Sankeyy)
View(df)
df
grp
aggdata$Group.1 <- as.factor (aggdata$Group.1)
Sankey <- gvisSankey(aggdata, from="Group.1", to="book", weight="x",
options=list(
sankey="{link: {color: { fill: '#d799ae' } },
node: { color: { fill: '#a61d4c' },
label: { color: '#871b47' } }}"))
plot(Sankey)
grpS<-sampDF %>%
group_by(hist_price_band, is_booking) %>%
summarise(n=n())
grpS
Sankeyy <- gvisSankey(grp, from="hist_price_band", to="is_booking", weight="n",
options=list(
sankey="{link: {color: { fill: '#d799ae' } },
node: { color: { fill: '#a61d4c' },
label: { color: '#871b47' } }}"))
plot(Sankeyy)
Sankeyy
Sankeyy <- gvisSankey(grpS, from="hist_price_band", to="is_booking", weight="n",
options=list(
sankey="{link: {color: { fill: '#d799ae' } },
node: { color: { fill: '#a61d4c' },
label: { color: '#871b47' } }}"))
plot(Sankeyy)
